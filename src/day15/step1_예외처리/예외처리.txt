* 컴파일러란?


예외처리
    - 오류/에러(ERROR) : 시스템이 종료되는 수준의 심각한 문제가 발생
        - 프로그램 개발자가 예측하여 방지 힘들다. 주로 하드웨어(메모리, CPU) 관련
    - 예외(Exception) : 개발자가 구현한 로직에서 발생한 실수나 사용자의 영향에 의해 발생
        - 오류와 달리 프로그램 개발자가 예측하여 방지가 가능하다. 경험이 중요시 한다.

예외 종류
    1. 일반예외 : 컴파일러가 예외 처리 코드 여부를 검사하는 예외
        - 주로 외부 시스템과 연동시 발생 : 입(키보드)출력, 파일(윈도우)처리, 네트워크, JDBC(자바-DB) 등등

    2. 실행예외 : 컴파일러가 예외 처리 코드 여부를 검사하지 않는 예외
        - 실행 도중에 발생 : NULL, 타입관련(형제끼리랑 등등), 인덱스 등등
        - 개발자의 경험의 의존성이 크다. 꼼꼼해야 한다.

예외 처리란 : 예외가 발생했을 때 다른 흐름으로 제어, - 예외 고치거나 코드를 수정하거나 하는 작업이 아니다.
    - IF랑 비슷하면서 다르다.
    - 이유 : 예외 발생하면 빨강색으로 콘솔에 예외사유 나오면서 프로그램 강제 종료.
        - 프로그램 배포시 사용자가 안전하게 24시간 사용시 예외가 발생 하더라도 다른 흐름으로 제어해서 안전한
    - 문법
        try{ 예외 발생 하거나 발생 할 것(예측) 같은 코드 }
        catch (해당예외클래스명 객체변수명) { 예외 발생했을 때 코드 }

    - 다중 catch
        부모를 앞에 적는 것보다 뒤에
        Exception   // 얘 부모라서

예외 클래스
    - Exception 클래스
        - ClassNotFoundException 클래스 : 해당 클래스를 못찾았을 때 발생하는 예외를 관리하는 클래스
        -
        - NumberFormatException
        - ArrayIndexOutOfBoundsException 클래스 : 존재하지 않는 인덱스를 접근할 때 발생하는 예외 클래스
        - InputMismatchException :



예외 던지기/떠넘기기
    - 여러 곳에서 발생하는 예외를 특정한 곳에서 한 번에 처리하기 위해서
        - 쓰레기를 쓰레기장에 버리면 폐기물차차가 수거해서 폐기물소각장 처리
        - 예외를 던지면 특정한 곳에서 예외 처리



