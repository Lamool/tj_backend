- 타입이란?
   변수나 메서드 매개변수, 메서드 반환 값 등이 어떤 종류의 데이터인지를 정의하는 것이다.
   기본 자료형, 참조 자료형

- 타입을 언제 사용 해야 되는지?
   변수 선언, 메서드 매개변수와 반환값 정의, 클래스 필드 정의를 할 때 사용한다.



- 클래스란?
   여러 개의 객체를 생성할 수 있는 설계도이며, 필드와 메소드로 이루어져 있다.

- 클래스를 언제 사용해야 되는지?
   객체를 생성할 때 쓰인다. 코드의 구조화, 재사용, 유지보수의 편리성을 위해 사용한다.



- 객체란?
   현실 세계의 개념을 프로그래밍 언어의 형태로 표현한 것이다.

- 객체를 언제 사용해야 되는지?
   데이터와 해당 데이터를 처리하는 메소드를 하나의 단위로 묶어 관리할 때 사용한다.
   데이터의 직접적인 접근을 막기 위해 사용한다.
   코드의 구조화, 재사용, 유지보수의 편리성을 위해 사용한다.



- 멤버변수란?
   클래스 내부에 선언된 변수이다. 고유 속성을 갖고 있다.

- 멤버변수는 언제 사용해야 되는지?
   객체의 상태 저장, 객체 간 데이터 공유할 때 사용한다.



- 생성자란?
   객체를 생성할 때 호출되어 객체의 초기화를 해주는 것이다. 클래스의 이름과 동일하다.

- 생성자는 언제 사용 해야 되는지?
   객체를 초기화, 다양한 초기화 방법을 위해 오버로딩(매개변수 타입, 개수, 순서) 사용한다.



- 메소드/함수란?
   클래스 내부에 있고, 클래스의 객체가 수행하는 기능을 말한다.

- 메소드/함수란 언제 사용 해야 되는지?
   코드의 구조화와 모듈화를 위해 사용한다. 매개변수와 반환값을 활용하여 데이터를 처리한다.
   프로그래밍의 상호작용/협력을 구현하기 위해 사용한다.



- 매개변수란?
   메소드를 호출할 때 메소드에 전달하는 데이터를 받아들이는 변수이다.

- 매개변수란 언제 사용 해야 되는지?
   메소드 오버로딩을 구현할 때, 메소드를 호출할 때, 메소드에 필요한 데이터를 전달하기 위해 사용한다.



- 반환타입이란?
   메소드가 실행을 완료하고 반환하는 데이터의 타입을 말한다. 반환 타입이 없는 경우 void를 사용한다.

- 반환/리턴이란?
   메소드를 호출했던 곳으로 함수 내에서의 결과를 전달하는 것이다.

- 반환/리턴이란 언제 사용 해야 되는지?
   호출했던 곳에 반환값이 필요할 때 사용한다.











- 객체를 언제 사용해야 되는지?
   데이터와 해당 데이터를 처리하는 메소드를 하나의 단위로 묶어 관리할 때 사용한다.
   데이터의 직접적인 접근을 막기 위해 사용한다.
   코드의 구조화, 재사용, 유지보수의 편리성을 위해 사용한다.


- 멤버변수는 언제 사용해야 되는지?
   객체의 상태 저장, 객체 간 데이터 공유할 때 사용한다.


- 메소드/함수란?
   클래스 내부에 있고, 클래스의 객체가 수행하는 기능을 말한다.

- 메소드/함수란 언제 사용 해야 되는지?
   코드의 구조화와 모듈화를 위해 사용한다. 매개변수와 반환값을 활용하여 데이터를 처리한다.
   프로그래밍의 상호작용/협력을 구현하기 위해 사용한다.